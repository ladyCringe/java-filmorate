-- для отладки, чтобы перед каждым тестом не удалять таблицы в консоли
--drop table if exists feed;
--drop table if exists Film_Director;
--drop table if exists film_genres;
--drop table if exists friendships;
--drop table if exists genres;
--drop table if exists likes;
--drop table if exists review_likes;
--drop table if exists Directors;
--drop table if exists reviews;
--drop table if exists users;
--drop table if exists films;
--drop table if exists mpa_ratings;

CREATE TABLE IF NOT EXISTS users (
                                     id INT PRIMARY KEY,
                                     email VARCHAR(255) NOT NULL,
    login VARCHAR(100) NOT NULL,
    name VARCHAR(100),
    birthday DATE
    );

CREATE TABLE IF NOT EXISTS mpa_ratings (
                                           id INT PRIMARY KEY,
                                           name VARCHAR(20) NOT NULL
    );

CREATE TABLE IF NOT EXISTS films (
                                     id INT PRIMARY KEY,
                                     name VARCHAR(255) NOT NULL,
    description VARCHAR(200),
    release_date DATE,
    duration INT,
    mpa_id INT,
    FOREIGN KEY (mpa_id) REFERENCES mpa_ratings(id)
    );

CREATE TABLE IF NOT EXISTS genres (
                                      id INT PRIMARY KEY,
                                      name VARCHAR(100) NOT NULL
    );

CREATE TABLE IF NOT EXISTS film_genres (
                                           film_id INT NOT NULL,
                                           genre_id INT NOT NULL,
                                           PRIMARY KEY (film_id, genre_id),
    FOREIGN KEY (film_id) REFERENCES films(id),
    FOREIGN KEY (genre_id) REFERENCES genres(id)
    );

CREATE TABLE IF NOT EXISTS likes (
                                     user_id INT NOT NULL,
                                     film_id INT NOT NULL,
                                     PRIMARY KEY (user_id, film_id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (film_id) REFERENCES films(id)
    );

CREATE TABLE IF NOT EXISTS friendships (
                                           user_id INT NOT NULL,
                                           friend_id INT NOT NULL,
                                           confirmed BOOLEAN,
                                           PRIMARY KEY (user_id, friend_id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (friend_id) REFERENCES users(id)
    );

CREATE TABLE IF NOT EXISTS reviews (
                                       id INT PRIMARY KEY,
                                       content TEXT NOT NULL,
                                       is_positive BOOLEAN NOT NULL,
                                       user_id INT NOT NULL,
                                       film_id INT NOT NULL,
                                       usefulness INT DEFAULT 0,
                                       FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                                       FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS review_likes (
                                            review_id INT NOT NULL,
                                            user_id INT NOT NULL,
                                            is_positive BOOLEAN NOT NULL,
                                            PRIMARY KEY (review_id, user_id, is_positive),
                                            FOREIGN KEY (review_id) REFERENCES reviews(id) ON DELETE CASCADE,
                                            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Directors (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name VARCHAR NOT NULL CHECK (TRIM('	 ' FROM name) != '')	--у режиссера должно быть имя, поэтому пустые строки не разрешаем
													--если после удаления всех пробелов и табуляций значение будет пустое, то запрещаем добавлять в таблицу
);

CREATE TABLE IF NOT EXISTS Film_Director (
film_id INTEGER NOT NULL REFERENCES films (id) ON DELETE CASCADE,
director_id INTEGER NOT NULL REFERENCES directors (id) ON DELETE CASCADE,
PRIMARY KEY (film_id, director_id)
);

CREATE TABLE IF NOT EXISTS feed (
                                    event_id INT PRIMARY KEY,
                                    timestamp BIGINT NOT NULL,
                                    user_id INT NOT NULL,
                                    event_type VARCHAR(10) NOT NULL,
                                    operation VARCHAR(10) NOT NULL,
                                    entity_id INT NOT NULL,
                                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

